Example 1:
    scene:[],task:[A] Find a bottle and tell me it's height.
    response:_1=s,bottle;?_1==True{o,bottle;_2=oh,bottle;l,_2}
    reason:no bottle instance in the scene, so we use sweeping to find bottle, then orienting and use object_height to get the height and log to output the height
Example 2:
    scene:[apple_5],task:[A] Find an apple.
    response:o,apple;a
    reason:there is an apple instance in the scene, so we orienting and approach the apple_5
Example 3:
    scene:[apple_3],task:[Q] Is there an apple on your left?
    response:tu,90;_1=iv,apple;?_1==True{->l,'Yes';->True}l,'No';->False
    reason:turn left 90 degrees, then use is_visible to check whether there is an apple on your left
Example 4:
    scene:[chair_13, laptop_2],task:[A] Go to the chair behind you.
    response:tc,180;o,chair;a
    reason:the chair_13 is not the target because we want the one behind you. So we turn 180 degrees then orienting and approach the general object chair
Example 5:
    scene:[chair_3, laptop_1, bottle_5],task:[A] Find and go any edible object.
    response:_1=sa,'what's the edible target?';?_1!=False{o,_1;a}
    reason:edible object is abstract and there is no edible object in the scene, so we use sweeping_abstract to find the edible object
Example 6:
    scene:[chair_3, laptop_9],task:[A] Turn around with 30 degrees step until you can see some animal.
    response:8{_1=q,'what's the animal target?';?_1!=False{l,_1;->True}tc,30}->False
    reason:we use loop and query to find animal
Example 7:
    scene:[chair_3, laptop_9],task:[A] If you can see a chair, go find a person, else go find an orange.
    response:_1=s,person;?_1==True{o,person;a;->True}?_1==False{_2=s,orange;?_2==True{o,orange;a;->True}}->False
    reason:From the scene, we can see a chair, so we use sweeping to find a person
Example 8:
    scene:[chair_3, laptop_9],task:[A] Go to 
    response:l,'Please give me more information.'
    reason:The task is too vague, so we use log to output the advice
Example 9:
    scene:[person_1, person_2],task:[A] Approach the angriest-looking person.
    response:_1=lr,"Which is angrier, the person_1 or person_2? Output only 'person_1' or 'person_2'";?_1/person_1{o,person_1;a}?_1/"person_2"{o,person_2;a}->False
    reason:We use lr to ask llava which person is angrier. Then, depending on the output, we orient towards and approach the appropriate person.
Example 10:
    scene:[tree_1, tree_2, tree_3, tree_4, tree_5],task:[A] Find a trampoline in the area.
    response:_1=lr,"Does the scene contain a trampoline? If so, where?";?_1/"trampoline" | ?_1/"yes" {-> a} d,1000}->False
    reason:Trampolines are unusual objects, so we specifically query LLaVA to check if the scene/one. If the response/"trampoline" or "yes", we approach it. If not, we wait for a short duration and repeat the process, ensuring a thorough search for the trampoline.
Example 11:
    scene:[door_1, chair_1, table_1],task:[A] Leave the room.
    response:8{_1=lr,"Is the door open?";?_1/"yes" {-> o,door};?_1/"no" {_2=lr,"Can the drone fit through the door?";?_2/"yes" {-> o,door};?_2/"no" {_3=lr,"Is the drone on course for collision?";?_3/"yes" {-> tc,30};?_3/"no" {-> tu,30}}}}->False
    reason:To leave the room, the drone navigates to the door. We first check if the door is open. If it is, we approach it. If not, we check if the drone can fit through the door. If it can, we approach the door. If not, we check if the drone is on course for collision. If it is, we turn clockwise by 30 degrees. If not, we turn counterclockwise by 30 degrees. This loop ensures a systematic approach to navigating towards the door, considering various obstacles and conditions.